type Configuration = record {
    ledger_canister_id : principal;
};

type Tokens = nat;

// Balance

type BalanceArgs = record {
    account : principal;
};

type BalanceResult = variant {
    Ok : record {
        owner : Tokens;
        deposit : Tokens;
    };
    Err : text
};

// Transfer

type Subaccount = blob;
type Account = record {
    owner : principal;
    subaccount : opt Subaccount;
};

type BlockIndex = nat;

type MintArgs = record {
    amount : Tokens;
};

type MintResult = variant {
    Ok : BlockIndex;
    Err : text;
};

type TransferArgs = record {
    to : Account;
    amount : Tokens;
};

type TransferResult = variant {
    Ok : BlockIndex;
    Err : text;
};

// Consent

type ConsentPreferences = record {
    language : text;
};

type ConsentMessageRequest = record {
    method : text;
    arg : blob;
    consent_preferences : ConsentPreferences;
};

type ConsentInfo = record {
    consent_message : text;
    language : text;
};

type ErrorInfo = record {
    error_code : nat;
    description : text;
};

type ConsentMessageResponse = variant {
    Valid : ConsentInfo;
    Forbidden : ErrorInfo;
    MalformedCall : ErrorInfo;
};

// Service

service : (opt Configuration) -> {
    consent_message: (ConsentMessageRequest) -> (opt ConsentMessageResponse);
    balance_of: (BalanceArgs) -> (BalanceResult);
    mint: (MintArgs) -> (MintResult);
    transfer: (TransferArgs) -> (TransferResult);
}